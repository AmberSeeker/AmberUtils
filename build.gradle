buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Sets the version number shown in the file name.
version = modVersion
group = modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html

//noinspection GroovyUnusedAssignment
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: mcpChannel, version: mcpVersion
    
    accessTransformer = file('src/main/resources/META-INF/amberutils_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge-repo'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://jitpack.io'
    }
    ivy {
        name = 'Pixelmon Reforged'
        url "https://download.nodecdn.net/containers/reforged/server/release"
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact "[revision]/[artifact].[ext]"
        }
    }
}

// Enables use of the section character (ยง) instead of long tags. Thanks, Hiroku!
//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile)
{
    task ->
    task.options.encoding = 'UTF-8'
    task.options.fork = true
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + forgeVersion
    compileOnly 'org.spongepowered:spongeapi:' + spongeVersion
    compileOnly 'pixelmon:Pixelmon-1.12.2-' + pixelmonVersion + '-server:' + pixelmonVersion
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}
/*dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	
}*/

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "AmberUtils",
            "Specification-Vendor": "AmberSeeker",
            "Specification-Version": version,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"AmberSeeker",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar {
    // Configure the JAR file name
    archiveName = modBaseName+ '-' + version + '.jar'
    
    // Optionally, you can set the base name as well
    // archivesBaseName = 'CustomJarName'
    
    // Optionally, you can specify the destination directory for the JAR file
    destinationDir = file('D:/Pixver/spigtst/mods')
}

// Taken from the internet, with some slight edits. vvv
processResources
{
    // Moves the access transformer config to the right folder in the compiled .jar.
    rename '(.+_at.cfg)', 'META-INF/$1'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/*publishing {
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}*/